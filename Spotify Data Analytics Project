# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

Retrieve all columns for tracks with a popularity greater than 80:
SELECT * 
FROM BIT_DB.Spotifydata 
WHERE popularity > 80;

List unique artist names in the database:
SELECT DISTINCT artist_name 
FROM BIT_DB.Spotifydata
LIMIT 10;

Find the average danceability and energy for tracks with a popularity above 70:
SELECT AVG(danceability) AS avg_danceability, AVG(energy) AS avg_energy
FROM BIT_DB.Spotifydata 
WHERE popularity > 70;

Count the number of tracks for each time signature:
SELECT time_signature, COUNT(*) AS track_count
FROM BIT_DB.Spotifydata
GROUP BY time_signature;

Retrieve the top 5 tracks with the highest valence:
SELECT * FROM BIT_DB.Spotifydata 
ORDER BY valence DESC LIMIT 5;

Find the average tempo for tracks by a specific artist 
SELECT AVG(tempo) AS avg_tempo
FROM BIT_DB.Spotifydata WHERE artist_name = 'ArtistName';

Identify tracks with low energy (energy less than 0.5) and high danceability (danceability greater than 0.7):
SELECT * FROM BIT_DB.Spotifydata 
WHERE energy < 0.5 AND danceability > 0.7;

Calculate the total duration of all tracks in minutes:

SELECT SUM(duration_ms) / (1000 * 60) AS total_duration_minutes
FROM BIT_DB.Spotifydata;

Retrieve tracks with instrumentalness greater than 0.8 and sorted by descending popularity:
SELECT * FROM BIT_DB.Spotifydata WHERE instrumentalness > 0.8 ORDER BY popularity DESC;

Find the mode and key with the highest average loudness:
SELECT mode, key, AVG(loudness) AS avg_loudness
FROM BIT_DB.Spotifydata
GROUP BY mode, key
ORDER BY avg_loudness DESC
LIMIT 1;

Calculated the average popularity for the artists in the Spotify data table. 
Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH ArtistPopularityCTE AS (
    SELECT
        artist_name,
        AVG(popularity) AS avg_popularity
    FROM
        BIT_DB.Spotifydata
    GROUP BY
        artist_name
)

SELECT
    artist_name,
    avg_popularity,
    CASE
        WHEN avg_popularity >= 90 THEN 'Top Star'
        ELSE 'Regular'
    END AS popularity_label
FROM
    ArtistPopularityCTE;


